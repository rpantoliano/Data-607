{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Week 3 Assignment\"\nauthor: \"Richard Pantoliano Jr\"\ndate: \"September 18, 2016\"\noutput: html_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\nlibrary(stringr)\n```\n\n## Problem 3\nSetup:\n```{r}\nraw.data <-\"555-1239Moe Szyslak(636) 555-0113Burns, C. Montgomery555-6542Rev. Timothy Lovejoy555 8904Ned Flanders636-555-3226Simpson, Homer5553642Dr. Julius Hibbert\"\nname <- unlist(str_extract_all(raw.data, \"[[:alpha:]., ]{2,}\"))\nprint(name)\n```\n#(a) Use the tools of this chapter to rearrange the vector so that all elements conform to the standard first_name last_name.\n```{r}\n# Remove title & initials\nname_scrubbed <- str_replace(name, \"[[:alpha:]]{1,3}\\\\.\",\"\")\nname_scrubbed <- str_trim(name_scrubbed)\n\n# Process the scrubbed name list\noutput_list <- list()\nfor(i in 1:length(name_scrubbed))\n{\n  splitname <- str_split(name_scrubbed[i], \" \")\n  if(str_count(splitname[1], \",\") == 0)\n        output_list[i] <- paste(splitname[1], splitname[2], sep = \" \")\n  else\n  {\n    splitname[2] <- str_replace(splitname[2],\",\",\"\")\n    output_list[i] <- paste(splitname[2], splitname[1], sep=\" \")\n  }\n}\n\nprint(output_list)\n```\n\n#(b)Construct a logical vector indicating whether a character has a title (i.e., Rev.and Dr.).\nThis code checks for two or three character alphabetical characters, followed by a period.\n```{r}\nhas_title <- str_detect(name, \"[[:alpha:]]{2,3}\\\\.\")\nprint(has_title)\n```\n#(c) Construct a logical vector indicating whether a character has a second name.\nThis code splits the original name string by the space characters.  All names that contain a second name must have more than 2 parts.  For this particular data set, all individuals with second names do not have titles \n```{r }\nsplit_names <- c(str_split(name, \" \"))\nhas_second <- (lengths(split_names) > 2) & !has_title\nprint(has_second)\n```\n\n## Problem 4\nDescribe the types of strings that conform to the following regular expressions and\nconstruct an example that is matched by the regular expression.\n\n#(a) [0-9]+\\\\\\\\$\nThis pattern matches one or more digits followed by the dollar sign character\n```{r prob4a}\nstr1 <- \"test214$555 65$  3456767$ $\"\nprint(str_extract_all(str1, \"[0-9]+\\\\$\"))\n```\n\n#(b) \\\\\\\\b[a-z]{1,4}\\\\\\\\b\nThis pattern matches all words in a string constructed of lower-case letters and having a length between 1 and 4 characters\n```{r prob4b}\nstr2 <- \"The boy walked the walk.\"\nprint(str_extract_all(str2, \"\\\\b[a-z]{1,4}\\\\b\"))\n```\n\n#(c) .*?\\\\\\\\.txt$\n\nThis pattern matches any number of characters, ending with \".txt\" and that entire string occurring at the end of the line\n\n```{r prob4c}\nstr3a <- \"test1.txt\\n test2.txt\"\nstr3b <- \"hello3.txt\"\nprint(str_extract_all(str3a, \".*?\\\\.txt$\"))\nprint(str_extract_all(str3b, \".*?\\\\.txt$\"))\n```\n\n#(d) \\\\\\\\d{2}/\\\\\\\\d{2}/\\\\\\\\d{4}\nThis pattern matches 2 digits / 2 digits / 4 digits, in the same way that the USA does the mm/dd/yyyy date format\n```{r prob4d}\nstr4 <- \"99/99/9999 1/12/1111 12/1/1234 01/01/01 09/18/2016, a/wrong/example\"\nprint(str_extract_all(str4, \"\\\\d{2}/\\\\d{2}/\\\\d{4}\"))\n```\n\n#(e) <(.+?)>.+?</\\\\\\\\1>\nThis pattern matches markup tags (e.g. XML or HTML)\n```{r prob4e}\nstr5 <- \"<test>hello</test><test5>world</test5>\"\nprint(str_extract_all(str5, \"<(.+?)>.+?</\\\\1>\"))\n```",
    "created" : 1474242894206.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2534839907",
    "id" : "46D9710E",
    "lastKnownWriteTime" : 1474258148,
    "last_content_update" : 1474258148680,
    "path" : "~/R/Data 607/Week 3 Assignment/Pantoliano-Week3.Rmd",
    "project_path" : "Pantoliano-Week3.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}