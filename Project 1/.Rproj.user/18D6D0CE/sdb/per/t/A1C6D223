{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Project 1\"\nauthor: \"Richard Pantoliano Jr\"\ndate: \"September 25, 2016\"\noutput: html_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\nlibrary(stringr)\n```\n\n## Project Description\n\nThis assignment required us to process a text file containing a cross table from a chess tournament and create a CSV in the format:\n\n> Name, State, Points, Ranking before Tournament, Ranking after Tournament\n\nI approached this project in 4 steps:\n\n1. read text file containing the cross table & remove unnecessary header info\n2. parse table\n3. analyze the match data to calculate new rankings\n4. write the file to a CSV\n\n# Read the text file and remove header\nThe readline function built into R easily allows for reading all lines of a file\n```{r read_table}\ntournament_file <- readLines(file(\"tournamentinfo.txt\"), warn = FALSE)\n```\n\nI then removed the 4 lines worth of header information\n```{r preprocess}\ntournament_file <- tournament_file[-1]\ntournament_file <- tournament_file[-1]\ntournament_file <- tournament_file[-1]\ntournament_file <- tournament_file[-1]\n```\n\n# Parse the Table\nAt this point, we need to parse the table for each entrant into the tournament.  The important information in each entry consists of:\n\n1. A line containing the tournament #, name, total points, result of each of 7 rounds.  Each\n2. A line containing the state of origin for the player, ranking\n3. A line of underscores indicating the end of the entry\n\nEach piece of information on a line is separated by a pipe (|).\n\nI chose to process the file via loop which would traverse each of the remaining lines of the table.  For each line:\n\n1. Split the string based on the pipe as a delimiter\n2. Trim whitespace from all of the strings\n3. Determine the index for where each piece of information would be placed in the separate vectors for each piece of information we wish to record in the csv\n4. If it is the first line of the participant entry, store the name, points, and list of match info into the appropriate vectors\n5. If it is the second line of the participant entry, store the state and old rank in the appropriate vectors\n\n```{r parsed}\nnames_list <- vector()\nstates_list <- vector()\npoints_list <- vector()\nold_rank_list <- vector()\nnew_rank_list <- vector()\nmatches_list <- vector()\n\nfor(index in 1:length(tournament_file))\n{\n  dedelimit_line <- strsplit(tournament_file[index], \"\\\\|\")\n  dedelimit_line <- str_trim(dedelimit_line[[1]])\n  str_trim(dedelimit_line)\n  \n  new_index <- ceiling(as.double(index) / 3)\n  if(index %% 3 == 1)\n  {\n    names_list[new_index] <- dedelimit_line[2]\n    points_list[new_index] <- dedelimit_line[3] \n    matches_list[new_index] <- list(dedelimit_line[4:10])\n  }\n  else if (index %% 3 == 2)\n  {\n    states_list[new_index] <- dedelimit_line[1]\n    rank <- str_extract(dedelimit_line[2], \"R:\\\\s+\\\\d+\")\n    old_rank_list[new_index] <- str_extract(rank, \"\\\\d+\")\n  }\n}\n```\n\n# Analyze Match Info to Determine New Ranking\n\nBased on the assignment requiremments, we consider both a win or a draw as a win for the participant.  For that reason, we check for either the W or D characters in the match list for each participant to see if they should get credit for a win.  If the person does get credit for the win, we determine the ranking of the person that s/he beat and add that to an accumulator var.  Finally, we divide that accumulator variable by the number of wins that person had, then store in in the vector containing the new rankings after the tournament.\n```{r match_info}\nfor(index in 1:length(names_list))\n{\n  wcount <- 0\n  waccum <- 0 \n  for(mindex in 1:7)\n  {\n    is_winner <- str_detect(matches_list[[index]][mindex], \"W|D\")[[1]]\n    if(is_winner)\n    {\n      wcount <- wcount + 1;\n      waccum <- waccum + as.integer(old_rank_list[as.integer(str_extract(matches_list[[index]][mindex], \"\\\\d+\"))])\n    }\n  }\n  if(wcount > 0)\n    new_rank_list[index] <- round(waccum / wcount)\n  else\n    new_rank_list[index] <- old_rank_list[index]\n}\n\n\n```\n\n# Write the CSV\nThis is another simple step.  First, I create a dataframe from vectors representing all of the tournament information that we wish to record\n```{r create_frame}\ndf <- data.frame(names_list,states_list,points_list,old_rank_list,new_rank_list)\n```\n\nFinally, I use the write.csv function to write that dataframe to the file \"tournament.csv\"\n```{r write_file}\nwrite.csv(df, file = \"tournament.csv\", row.names = FALSE, quote=FALSE)\n```",
    "created" : 1474833947223.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "789210509",
    "id" : "A1C6D223",
    "lastKnownWriteTime" : 1474836211,
    "last_content_update" : 1474836211582,
    "path" : "~/R/Data 607/Project 1/Pantoliano-Project_1.Rmd",
    "project_path" : "Pantoliano-Project_1.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}